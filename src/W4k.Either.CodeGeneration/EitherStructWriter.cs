using System.Linq;
using System.Text;

namespace W4k.Either.CodeGeneration;

internal class EitherStructWriterContext
{
    public EitherStructWriterContext(StringBuilder sb, string typeName, byte numOfTypeParams)
    {
        StringBuilder = sb;
        TypeName = typeName;
        NumOfTypeParams = numOfTypeParams;
        TypeParams = string.Join(
            ", ",
            Enumerable.Range(0, numOfTypeParams).Select(i => $"T{i}"));
    }

    public StringBuilder StringBuilder { get; }
    public string TypeName { get; }
    public byte NumOfTypeParams { get; }
    public string TypeParams { get; }
}

internal static class EitherStructWriter
{
    public static void WriteFileHeader(EitherStructWriterContext ctx)
    {
        ctx.StringBuilder.AppendLine(
            """
// <auto-generated />
#nullable enable
""");
    }

    public static void WriteUsing(EitherStructWriterContext ctx)
    {
        ctx.StringBuilder.AppendLine(
            """
using System;
using System.Diagnostics.CodeAnalysis;
using System.Diagnostics.Contracts;
using System.Runtime.Serialization;
using System.Threading;
using System.Threading.Tasks;
using W4k.Either.Abstractions;
""");
    }

    public static void WriteTypeDeclaration(EitherStructWriterContext ctx)
    {
        // [Serializable]
        // public readonly struct Either<T0, T1> : IEquatable<Either<T0, T1>>, ISerializable
        //     where T0 : notnull
        //     where T1 : notnull
        // {
        ctx.StringBuilder.AppendLine(
            $$"""
[Serializable]
readonly struct {{ctx.TypeName}}<{{ctx.TypeParams}}> : IEquatable<{{ctx.TypeName}}<{{ctx.TypeParams}}>>, ISerializable
""");

        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.AppendLine($"    where T{i} : notnull");
        }

        ctx.StringBuilder.AppendLine("{");
    }

    public static void WriteFields(EitherStructWriterContext ctx)
    {
        // private readonly byte _idx;
        // private readonly T0? _v0;
        // private readonly T1? _v1;
        ctx.StringBuilder.AppendLine("    private readonly byte _idx;");
        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.AppendLine($"    private readonly T{i}? _v{i};");
        }
    }

    public static void WriteConstructors(EitherStructWriterContext ctx)
    {
        // public Either(T0 v0)
        // {
        //     ArgumentNullException.ThrowIfNull(v0);
        //     _idx = 0;
        //     _v0 = v0;
        // }
        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.AppendLine(
                $$"""
    public {{ctx.TypeName}}(T{{i}} v{{i}})
    {
        ArgumentNullException.ThrowIfNull(v{{i}});
        _idx = {{i}};
        _v{{i}} = v{{i}};
    }
""");
        }
    }

    public static void WriteSerializableConstructor(EitherStructWriterContext ctx)
    {
        // private Either(SerializationInfo info, StreamingContext context)
        // {
        //     _idx = info.GetByte(nameof(_idx));
        //     switch (_idx)
        //     {
        //         case 0:
        //             _v0 = (T0?)info.GetValue(nameof(_v0), typeof(T0));
        //             break;
        //
        //         // ...
        //     }
        // }
        ctx.StringBuilder.AppendLine(
            $$"""
    private {{ctx.TypeName}}(SerializationInfo info, StreamingContext context)
    {
        _idx = info.GetByte(nameof(_idx));
        switch (_idx)
        {
""");

        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.AppendLine(
                $"""
            case {i}:
                _v{i} = (T{i}?)info.GetValue(nameof(_v{i}), typeof(T{i}));
                break;
""");
        }

        ctx.StringBuilder.AppendLine(
            """
            default:
                ThrowHelper.ThrowOnInvalidState();
                break;
        }
    }
""");
    }

    public static void WriteCaseProperty(EitherStructWriterContext ctx)
    {
        // public object? Case =>
        //     _idx switch
        //     {
        //         0 => _v0,
        //         1 => _v1,
        //         _ => ThrowHelper.ThrowOnInvalidState<object?>(),
        //     };
        ctx.StringBuilder.AppendLine(
            """
    [Pure]
    public object? Case =>
        _idx switch
        {
""");

        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.AppendLine($"            {i} => _v{i},");
        }

        ctx.StringBuilder.AppendLine(
            """
            _ => ThrowHelper.ThrowOnInvalidState<object?>(),
        };
""");
    }

    public static void WriteOperators(EitherStructWriterContext ctx)
    {
        // [Pure]
        // public static bool operator ==(Either<T0, T1> left, Either<T0, T1> right) => left.Equals(right);
        //
        // [Pure]
        // public static bool operator !=(Either<T0, T1> left, Either<T0, T1> right) => !left.Equals(right);
        //
        // [Pure]
        // public static implicit operator Either<T0, T1>(T0 v0) => new(v0);
        //
        // ...
        ctx.StringBuilder.AppendLine(
            $"""
    [Pure]
    public static bool operator ==({ctx.TypeName}<{ctx.TypeParams}> left, {ctx.TypeName}<{ctx.TypeParams}> right) => left.Equals(right);

    [Pure]
    public static bool operator !=({ctx.TypeName}<{ctx.TypeParams}> left, {ctx.TypeName}<{ctx.TypeParams}> right) => !left.Equals(right);
""");

        ctx.StringBuilder.AppendLine();

        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.AppendLine(
                $"""
    [Pure]
    public static implicit operator {ctx.TypeName}<{ctx.TypeParams}>(T{i} v{i}) => new(v{i});
""");
        }
    }

    public static void WriteGetHashCode(EitherStructWriterContext ctx)
    {
        // [Pure]
        // public override int GetHashCode() =>
        //     _idx switch
        //     {
        //         0 => _v0?.GetHashCode() ?? 0,
        //         1 => _v1?.GetHashCode() ?? 0,
        //         _ => ThrowHelper.ThrowOnInvalidState<int>(),
        //     };
        ctx.StringBuilder.AppendLine(
            """
    [Pure]
    public override int GetHashCode() =>
        _idx switch
        {
""");

        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.AppendLine($"            {i} => _v{i}?.GetHashCode() ?? 0,");
        }

        ctx.StringBuilder.AppendLine(
            """
            _ => ThrowHelper.ThrowOnInvalidState<int>(),
        };
""");
    }

    public static void WriteToString(EitherStructWriterContext ctx)
    {
        // [Pure]
        // public override string ToString() =>
        //     _idx switch
        //     {
        //         0 => _v0!.ToString(),
        //         1 => _v1!.ToString(),
        //         _ => ThrowHelper.ThrowOnInvalidState<string>(),
        //     };
        ctx.StringBuilder.AppendLine(
            """
    [Pure]
    public override string ToString() =>
        _idx switch
        {
""");

        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.AppendLine($"            {i} => _v{i}!.ToString(),");
        }

        ctx.StringBuilder.AppendLine(
            """
            _ => ThrowHelper.ThrowOnInvalidState<string>(),
        };
""");
    }

    public static void WriteObjectEquals(EitherStructWriterContext ctx)
    {
        // [Pure]
        // public override bool Equals(object? obj)
        // {
        //     if (obj is not Either<T0, T1> other)
        //     {
        //         return false;
        //     }
        //
        //     return Equals(other);
        // }
        ctx.StringBuilder.AppendLine(
            $$"""
    [Pure]
    public override bool Equals([NotNullWhen(true)] object? obj)
    {
        if (obj is not {{ctx.TypeName}}<{{ctx.TypeParams}}> other)
        {
            return false;
        }

        return Equals(other);
    }
""");
    }

    public static void WriteEquatableEquals(EitherStructWriterContext ctx)
    {
        // [Pure]
        // public bool Equals(Either<T0, T1> other) =>
        //     _idx == other._idx && _idx switch
        //     {
        //         0 => _v0!.Equals(other._v0),
        //         1 => _v1!.Equals(other._v1),
        //         _ => ThrowHelper.ThrowOnInvalidState<bool>(),
        //     };
        ctx.StringBuilder.AppendLine(
            """
    [Pure]
    public bool Equals(Either<T0, T1> other) =>
        _idx == other._idx && _idx switch
        {
""");

        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.AppendLine($"            {i} => _v{i}!.Equals(other._v{i}),");
        }

        ctx.StringBuilder.AppendLine(
            """
            _ => ThrowHelper.ThrowOnInvalidState<bool>(),
        };
""");
    }

    public static void WriteGetObjectData(EitherStructWriterContext ctx)
    {
        // public void GetObjectData(SerializationInfo info, StreamingContext context)
        // {
        //     info.AddValue(nameof(_idx), _idx);
        //     switch (_idx)
        //     {
        //         case 0:
        //             info.AddValue(nameof(_v0), _v0);
        //             break;
        //
        //         // ...
        //     }
        // }
        ctx.StringBuilder.AppendLine(
            """
    public void GetObjectData(SerializationInfo info, StreamingContext context)
    {
        info.AddValue(nameof(_idx), _idx);
        switch (_idx)
        {
""");

        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.AppendLine(
                $$"""
            case {{i}}:
                info.AddValue(nameof(_v{{i}}), _v{{i}});
                break;
""");
        }

        ctx.StringBuilder.AppendLine(
            """
            default:
                ThrowHelper.ThrowOnInvalidState();
                break;
        }
    }
""");
    }

    public static void WriteTryPick(EitherStructWriterContext ctx)
    {
        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.AppendLine(
                $$"""
    [Pure]
    public bool TryPick([NotNullWhen(true)] out T{{i}}? value)
    {
        if (_idx == {{i}})
        {
            value = _v{{i}}!;
            return true;
        }

        value = default;
        return false;
    }
""");
        }
    }

    public static void WriteMatch(EitherStructWriterContext ctx)
    {
        // public TResult Match<TResult>(
        //     Func<T0, TResult> f0,
        //     Func<T1, TResult> f1)
        // {
        //     ArgumentNullException.ThrowIfNull(f0);
        //     ArgumentNullException.ThrowIfNull(f1);
        //
        //     return _idx switch
        //     {
        //         0 => f0(_v0!),
        //         1 => f1(_v1!),
        //         _ => ThrowHelper.ThrowOnInvalidState<TResult>(),
        //     };
        // }
        ctx.StringBuilder.AppendLine("    public TResult Match<TResult>(");

        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.Append($"        Func<T{i}, TResult> f{i}");
            ctx.StringBuilder.AppendLine(
                i < ctx.NumOfTypeParams - 1
                    ? ","
                    : ")");
        }

        ctx.StringBuilder.AppendLine("{");

        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.AppendLine($"        ArgumentNullException.ThrowIfNull(f{i});");
        }

        ctx.StringBuilder.AppendLine(
            """
        return _idx switch
        {
""");

        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.AppendLine($"            {i} => f{i}(_v{i}!),");
        }

        ctx.StringBuilder.AppendLine(
            """
            _ => ThrowHelper.ThrowOnInvalidState<TResult>(),
        };
    }
""");
    }

    public static void WriteMatchWithState(EitherStructWriterContext ctx)
    {
        // public TResult Match<TState, TResult>(
        //     TState state,
        //     Func<TState, T0, TResult> f0,
        //     Func<TState, T1, TResult> f1)
        // {
        //     ArgumentNullException.ThrowIfNull(f0);
        //     ArgumentNullException.ThrowIfNull(f1);
        //
        //     return _idx switch
        //     {
        //         0 => f0(state, _v0!),
        //         1 => f1(state, _v1!),
        //         _ => ThrowHelper.ThrowOnInvalidState<TResult>(),
        //     };
        // }
        ctx.StringBuilder.AppendLine("    public TResult Match<TState, TResult>(");

        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.Append($"        Func<TState, T{i}, TResult> f{i}");
            ctx.StringBuilder.AppendLine(
                i < ctx.NumOfTypeParams - 1
                    ? ","
                    : ")");
        }

        ctx.StringBuilder.AppendLine("{");

        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.AppendLine($"        ArgumentNullException.ThrowIfNull(f{i});");
        }

        ctx.StringBuilder.AppendLine(
            """
        return _idx switch
        {
""");

        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.AppendLine($"            {i} => f{i}(state, _v{i}!),");
        }

        ctx.StringBuilder.AppendLine(
            """
            _ => ThrowHelper.ThrowOnInvalidState<TResult>(),
        };
    }
""");
    }

    public static void WriteMatchAsync(EitherStructWriterContext ctx)
    {
        // public Task<TResult> Match<TResult>(
        //     Func<T0, Task<TResult>> f0,
        //     Func<T1, Task<TResult>> f1,
        //     CancellationToken cancellationToken = default)
        // {
        //     ArgumentNullException.ThrowIfNull(f0);
        //     ArgumentNullException.ThrowIfNull(f1);
        //
        //     return _idx switch
        //     {
        //         0 => f0(_v0!, cancellationToken),
        //         1 => f1(_v1!, cancellationToken),
        //         _ => ThrowHelper.ThrowOnInvalidState<TResult>(),
        //     };
        // }
        ctx.StringBuilder.AppendLine("    public TResult MatchAsync<TResult>(");

        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.Append($"        Func<T{i}, TResult> f{i},");
        }

        ctx.StringBuilder.AppendLine(
            """
        CancellationToken cancellationToken = default)
{
""");

        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.AppendLine($"        ArgumentNullException.ThrowIfNull(f{i});");
        }

        ctx.StringBuilder.AppendLine(
            """
        return _idx switch
        {
""");

        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.AppendLine($"            {i} => f{i}(_v{i}!, cancellationToken),");
        }

        ctx.StringBuilder.AppendLine(
            """
            _ => ThrowHelper.ThrowOnInvalidState<TResult>(),
        };
    }
""");
    }

    public static void WriteMatchAsyncWithState(EitherStructWriterContext ctx)
    {
        // public Task<TResult> Match<TState, TResult>(
        //     TState state,
        //     Func<TState, T0, Task<TResult>> f0,
        //     Func<TState, T1, Task<TResult>> f1,
        //     CancellationToken cancellationToken = default)
        // {
        //     ArgumentNullException.ThrowIfNull(f0);
        //     ArgumentNullException.ThrowIfNull(f1);
        //
        //     return _idx switch
        //     {
        //         0 => f0(state, _v0!, cancellationToken),
        //         1 => f1(state, _v1!, cancellationToken),
        //         _ => ThrowHelper.ThrowOnInvalidState<TResult>(),
        //     };
        // }
        ctx.StringBuilder.AppendLine("    public TResult MatchAsync<TState, TResult>(");

        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.Append($"        Func<TState, T{i}, TResult> f{i},");
        }

        ctx.StringBuilder.AppendLine(
            """
        CancellationToken cancellationToken = default)
{
""");

        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.AppendLine($"        ArgumentNullException.ThrowIfNull(f{i});");
        }

        ctx.StringBuilder.AppendLine(
            """
        return _idx switch
        {
""");

        for (var i = 0; i < ctx.NumOfTypeParams; i++)
        {
            ctx.StringBuilder.AppendLine($"            {i} => f{i}(state, _v{i}!, cancellationToken),");
        }

        ctx.StringBuilder.AppendLine(
            """
            _ => ThrowHelper.ThrowOnInvalidState<TResult>(),
        };
    }
""");
    }
}
