using System.Text;

namespace W4k.Either.CodeGeneration;

internal static class EitherStructWriter
{
    public static void Write(EitherStructGenerationContext context, StringBuilder sb)
    {
        var typeParams = string.Join(", ", context.TypeParameters);
        var typeName = context.IsGenericType
            ? $"{context.TargetTypeName}<{typeParams}>"
            : context.TargetTypeName;
        
        WriteFileHeader(sb);
        WriteUsing(sb);
        StartNamespace(context, sb);
        StartTypeDeclaration(context, sb, typeName);
        WriteFields(context, sb);
        WriteConstructors(context, sb);
        WriteProperties(context, sb);
        WriteOperators(context, sb, typeName);
        WriteObjectOverrides(context, sb, typeName);
        WriteEquatableEquals(context, sb, typeName);
        WriteGetObjectData(context, sb);
        WriteTryPick(context, sb);
        WriteMatch(context, sb);
        WriteMatchWithState(context, sb);
        WriteAsyncMatch(context, sb);
        WriteAsyncMatchWithState(context, sb);
        WriteSwitch(context, sb);
        WriteSwitchWithState(context, sb);
        WriteAsyncSwitch(context, sb);
        WriteAsyncSwitchWithState(context, sb);
        EndTypeDeclaration(sb);
        EndNamespace(sb);
    }

    private static void WriteFileHeader(StringBuilder sb)
    {
        sb.AppendLine("// <auto-generated />");
        sb.AppendLine();
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
    }

    private static void WriteUsing(StringBuilder sb)
    {
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Diagnostics.CodeAnalysis;");
        sb.AppendLine("using System.Diagnostics.Contracts;");
        sb.AppendLine("using System.Runtime.Serialization;");
        sb.AppendLine("using System.Threading;");
        sb.AppendLine("using System.Threading.Tasks;");
        sb.AppendLine("using W4k.Either.Abstractions;");
        sb.AppendLine();
    }

#region Namespace

    private static void StartNamespace(EitherStructGenerationContext context, StringBuilder sb)
    {
        sb.Append("namespace ");
        sb.AppendLine(context.TargetNamespace);
        sb.AppendLine("{");
    }

    private static void EndNamespace(StringBuilder sb)
    {
        sb.AppendLine("}");
    }

#endregion
    
#region Type declaration

    private static void StartTypeDeclaration(EitherStructGenerationContext context, StringBuilder sb, string typeName)
    {
        sb.AppendLine("    [Serializable]");
        sb.AppendLine($"    readonly partial struct {typeName} : IEquatable<{typeName}>, ISerializable");

        foreach (var t in context.TypeParameters)
        {
            sb.AppendLine($"        where {t} : notnull");
        }

        sb.AppendLine("    {");
    }

    private static void EndTypeDeclaration(StringBuilder sb)
    {
        sb.AppendLine("    }");
    }
    
#endregion

#region Fields

    private static void WriteFields(EitherStructGenerationContext context, StringBuilder sb)
    {
        var types = context.TypeParameters;

        sb.AppendLine("        private readonly byte _idx;");
        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine($"        private readonly {types[i]}? _v{i};");
        }

        sb.AppendLine();
    }
    
#endregion

#region Constructors

    private static void WriteConstructors(EitherStructGenerationContext context, StringBuilder sb)
    {
        var types = context.TypeParameters;

        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine($"        public {context.TargetTypeName}({types[i]} v{i})");
            sb.AppendLine("        {");
            sb.AppendLine($"            ThrowHelper.ThrowIfNull(v{i});");
            sb.AppendLine($"            _idx = {i};");
            sb.AppendLine($"            _v{i} = v{i};");
            sb.AppendLine("        }");
            sb.AppendLine();
        }

        WriteSerializableConstructor(context, sb);
    }

    private static void WriteSerializableConstructor(EitherStructGenerationContext context, StringBuilder sb)
    {
        var types = context.TypeParameters;

        sb.AppendLine($"        private {context.TargetTypeName}(SerializationInfo info, StreamingContext context)");
        sb.AppendLine("        {");
        sb.AppendLine("            _idx = info.GetByte(nameof(_idx));");
        sb.AppendLine("            switch (_idx)");
        sb.AppendLine("            {");

        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine($"                case {i}:");
            sb.AppendLine($"                    _v{i} = ({types[i]}?)info.GetValue(nameof(_v{i}), typeof({types[i]}));");
            sb.AppendLine("                    break;");
        }
        
        sb.AppendLine("                default:");
        sb.AppendLine("                    ThrowHelper.ThrowOnInvalidState();");
        sb.AppendLine("                    break;");
        sb.AppendLine("            }");
        sb.AppendLine("        }");
        sb.AppendLine();
    }
    
#endregion

#region Properties

    private static void WriteProperties(EitherStructGenerationContext context, StringBuilder sb)
    {
        var types = context.TypeParameters;

        sb.AppendLine("        [Pure]");
        sb.AppendLine("        public object? Case");
        sb.AppendLine("        {");
        sb.AppendLine("            get");
        sb.AppendLine("            {");
        sb.AppendLine("                switch (_idx)");
        sb.AppendLine("                {");
        
        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine($"                    case {i}:");
            sb.AppendLine($"                        return _v{i};");
        }
        
        sb.AppendLine("                    default:");
        sb.AppendLine("                        return ThrowHelper.ThrowOnInvalidState<object?>();");
        sb.AppendLine("                }");
        sb.AppendLine("            }");
        sb.AppendLine("        }");
        sb.AppendLine();
    }

#endregion

#region Operators

    private static void WriteOperators(EitherStructGenerationContext context, StringBuilder sb, string typeName)
    {
        var types = context.TypeParameters;

        sb.AppendLine("        [Pure]");    
        sb.AppendLine($"        public static bool operator ==({typeName} left, {typeName} right) => left.Equals(right);");
        sb.AppendLine();

        sb.AppendLine("        [Pure]");
        sb.AppendLine($"        public static bool operator !=({typeName} left, {typeName} right) => !left.Equals(right);");
        sb.AppendLine();

        foreach (var t in types)
        {
            sb.AppendLine("        [Pure]");
            sb.AppendLine($"        public static implicit operator {typeName}({t} v) => new(v);");
            sb.AppendLine();
        }
    }

#endregion

#region Object overrides

    private static void WriteObjectOverrides(EitherStructGenerationContext context, StringBuilder sb, string typeName)
    {
        WriteGetHashCode(context, sb);
        WriteToString(context, sb);
        WriteObjectEquals(sb, typeName);
    }

    private static void WriteGetHashCode(EitherStructGenerationContext context, StringBuilder sb)
    {
        var types = context.TypeParameters;

        sb.AppendLine("        [Pure]");
        sb.AppendLine("        public override int GetHashCode()");
        sb.AppendLine("        {");
        sb.AppendLine("            switch (_idx)");
        sb.AppendLine("            {");
        
        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine($"                case {i}:");
            sb.AppendLine($"                    return _v{i}?.GetHashCode() ?? 0;");
        }
        
        sb.AppendLine("                default:");
        sb.AppendLine("                    return ThrowHelper.ThrowOnInvalidState<int>();");
        sb.AppendLine("            }");
        sb.AppendLine("        }");
        sb.AppendLine();
    }
    
    private static void WriteToString(EitherStructGenerationContext context, StringBuilder sb)
    {
        var types = context.TypeParameters;

        sb.AppendLine("        [Pure]");
        sb.AppendLine("        public override string ToString()");
        sb.AppendLine("        {");
        sb.AppendLine("            switch (_idx)");
        sb.AppendLine("            {");
        
        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine($"                case {i}:");
            sb.AppendLine($"                    return _v{i}?.ToString() ?? string.Empty;");
        }
        
        sb.AppendLine("                default:");
        sb.AppendLine("                    return ThrowHelper.ThrowOnInvalidState<string>();");
        sb.AppendLine("            }");
        sb.AppendLine("        }");
        sb.AppendLine();
    }

    private static void WriteObjectEquals(StringBuilder sb, string typeName)
    {
        sb.AppendLine("        [Pure]");
        sb.AppendLine("        public override bool Equals(object? obj)");
        sb.AppendLine("        {");
        sb.AppendLine($"            if (obj is not {typeName} other)");
        sb.AppendLine("            {");
        sb.AppendLine("                return false;");
        sb.AppendLine("            }");
        sb.AppendLine();
        sb.AppendLine("            return Equals(other);");
        sb.AppendLine("        }");
        sb.AppendLine();
    }

#endregion

#region IEquatable

    private static void WriteEquatableEquals(EitherStructGenerationContext context, StringBuilder sb, string typeName)
    {
        var types = context.TypeParameters;

        sb.AppendLine("        [Pure]");
        sb.AppendLine($"        public bool Equals({typeName} other)");
        sb.AppendLine("        {");
        sb.AppendLine("            if (_idx != other._idx)");
        sb.AppendLine("            {");
        sb.AppendLine("                return false;");
        sb.AppendLine("            }");
        sb.AppendLine();
        sb.AppendLine("            switch (_idx)");
        sb.AppendLine("            {");

        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine($"                case {i}:");
            sb.AppendLine($"                    return _v{i}!.Equals(other._v{i});");
        }
        
        sb.AppendLine("                default:");
        sb.AppendLine("                    return ThrowHelper.ThrowOnInvalidState<bool>();");
        sb.AppendLine("            }");
        sb.AppendLine("        }");
        sb.AppendLine();
    }

#endregion

#region ISerializable

    private static void WriteGetObjectData(EitherStructGenerationContext context, StringBuilder sb)
    {
        var types = context.TypeParameters;

        sb.AppendLine("        [Pure]");
        sb.AppendLine("        void ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)");
        sb.AppendLine("        {");
        sb.AppendLine("            info.AddValue(nameof(_idx), _idx);");
        sb.AppendLine("            switch (_idx)");
        sb.AppendLine("            {");
        
        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine($"                case {i}:");
            sb.AppendLine($"                    info.AddValue(nameof(_v{i}), _v{i});");
            sb.AppendLine("                    break;");
        }
        
        sb.AppendLine("                default:");
        sb.AppendLine("                    ThrowHelper.ThrowOnInvalidState();");
        sb.AppendLine("                    break;");
        sb.AppendLine("            }");
        sb.AppendLine("        }");
        sb.AppendLine();
    }

#endregion

    private static void WriteTryPick(EitherStructGenerationContext context, StringBuilder sb)
    {
        var types = context.TypeParameters;

        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine("        [Pure]");
            sb.AppendLine($"        public bool TryPick([NotNullWhen(true)] out {types[i]}? value)");
            sb.AppendLine("        {");
            sb.AppendLine($"            if (_idx == {i})");
            sb.AppendLine("            {");
            sb.AppendLine($"                value = _v{i}!;");
            sb.AppendLine("                return true;");
            sb.AppendLine("            }");
            sb.AppendLine();
            sb.AppendLine("            value = default;");
            sb.AppendLine("            return false;");
            sb.AppendLine("        }");
            sb.AppendLine();
        }
    }

#region Match
    
    private static void WriteMatch(EitherStructGenerationContext context, StringBuilder sb)
    {
        var types = context.TypeParameters;

        sb.AppendLine("        public TResult Match<TResult>(");

        // parameters
        for (var i = 0; i < types.Count; i++)
        {
            sb.Append($"            Func<{types[i]}, TResult> f{i}");
            sb.AppendLine(
                i < types.Count - 1
                    ? ","
                    : ")");
        }
        
        sb.AppendLine("        {");

        // null checks
        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine($"            ThrowHelper.ThrowIfNull(f{i});");
        }

        sb.AppendLine();
        
        // switch
        sb.AppendLine("            switch(_idx)");
        sb.AppendLine("            {");

        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine($"                case {i}:");
            sb.AppendLine($"                    return f{i}(_v{i}!);");
        }

        sb.AppendLine("                default:");
        sb.AppendLine("                    return ThrowHelper.ThrowOnInvalidState<TResult>();");
        sb.AppendLine("            };");
        sb.AppendLine("        }");
        sb.AppendLine();
    }
    
    private static void WriteMatchWithState(EitherStructGenerationContext context, StringBuilder sb)
    {
        var types = context.TypeParameters;

        sb.AppendLine("        public TResult Match<TState, TResult>(");

        // parameters
        sb.AppendLine("            TState state,");
        for (var i = 0; i < types.Count; i++)
        {
            sb.Append($"            Func<TState, {types[i]}, TResult> f{i}");
            sb.AppendLine(
                i < types.Count - 1
                    ? ","
                    : ")");
        }
        
        sb.AppendLine("        {");

        // null checks
        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine($"            ThrowHelper.ThrowIfNull(f{i});");
        }

        sb.AppendLine();
        
        // switch
        sb.AppendLine("            switch(_idx)");
        sb.AppendLine("            {");

        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine($"                case {i}:");
            sb.AppendLine($"                    return f{i}(state, _v{i}!);");
        }

        sb.AppendLine("                default:");
        sb.AppendLine("                    return ThrowHelper.ThrowOnInvalidState<TResult>();");
        sb.AppendLine("            };");
        sb.AppendLine("        }");
        sb.AppendLine();
    }
    
#endregion

#region MatchAsync

    private static void WriteAsyncMatch(EitherStructGenerationContext context, StringBuilder sb)
    {
        var types = context.TypeParameters;

        sb.AppendLine("        public Task<TResult> MatchAsync<TResult>(");

        // parameters
        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine($"            Func<{types[i]}, CancellationToken, Task<TResult>> f{i},");
        }

        sb.AppendLine("            CancellationToken cancellationToken = default)");
        sb.AppendLine("        {");

        // null checks
        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine($"            ThrowHelper.ThrowIfNull(f{i});");
        }

        sb.AppendLine();
        
        // switch
        sb.AppendLine("            switch(_idx)");
        sb.AppendLine("            {");

        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine($"                case {i}:");
            sb.AppendLine($"                    return f{i}(_v{i}!, cancellationToken);");
        }

        sb.AppendLine("                default:");
        sb.AppendLine("                    return ThrowHelper.ThrowOnInvalidState<Task<TResult>>();");
        sb.AppendLine("            };");
        sb.AppendLine("        }");
        sb.AppendLine();
    }
    
    private static void WriteAsyncMatchWithState(EitherStructGenerationContext context, StringBuilder sb)
    {
        var types = context.TypeParameters;

        sb.AppendLine("        public Task<TResult> MatchAsync<TState, TResult>(");

        // parameters
        sb.AppendLine("            TState state,");
        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine($"            Func<TState, {types[i]}, CancellationToken, Task<TResult>> f{i},");
        }

        sb.AppendLine("            CancellationToken cancellationToken = default)");
        sb.AppendLine("        {");

        // null checks
        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine($"            ThrowHelper.ThrowIfNull(f{i});");
        }

        sb.AppendLine();
        
        // switch
        sb.AppendLine("            switch(_idx)");
        sb.AppendLine("            {");

        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine($"                case {i}:");
            sb.AppendLine($"                    return f{i}(state, _v{i}!, cancellationToken);");
        }

        sb.AppendLine("                default:");
        sb.AppendLine("                    return ThrowHelper.ThrowOnInvalidState<Task<TResult>>();");
        sb.AppendLine("            };");
        sb.AppendLine("        }");
        sb.AppendLine();
    }

#endregion

#region Switch (all)

    private static void WriteSwitch(EitherStructGenerationContext context, StringBuilder sb)
    {
        var types = context.TypeParameters;
        
        sb.AppendLine("        public void Switch(");

        // parameters
        for (var i = 0; i < types.Count; i++)
        {
            sb.Append($"            Action<{types[i]}> a{i}");
            sb.AppendLine(
                i < types.Count - 1
                    ? ","
                    : ")");
        }
        
        sb.AppendLine("        {");
        sb.AppendLine("            Match(");

        for (var i = 0; i < types.Count; i++)
        {
            sb.Append($"                v => {{ a{i}(v); return Unit.Default; }}");
            sb.AppendLine(
                i < types.Count - 1
                    ? ","
                    : ");");
        }

        sb.AppendLine("        }");
        sb.AppendLine();
    }
    
    private static void WriteSwitchWithState(EitherStructGenerationContext context, StringBuilder sb)
    {
        var types = context.TypeParameters;
        
        sb.AppendLine("        public void Switch<TState>(");

        // parameters
        sb.AppendLine("            TState state,");
        for (var i = 0; i < types.Count; i++)
        {
            sb.Append($"            Action<TState, {types[i]}> a{i}");
            sb.AppendLine(
                i < types.Count - 1
                    ? ","
                    : ")");
        }
        
        sb.AppendLine("        {");
        sb.AppendLine("            Match(");
        sb.AppendLine("                state,");

        for (var i = 0; i < types.Count; i++)
        {
            sb.Append($"                (s, v) => {{ a{i}(s, v); return Unit.Default; }}");
            sb.AppendLine(
                i < types.Count - 1
                    ? ","
                    : ");");
        }

        sb.AppendLine("        }");
        sb.AppendLine();
    }
    
    private static void WriteAsyncSwitch(EitherStructGenerationContext context, StringBuilder sb)
    {
        var types = context.TypeParameters;
        
        sb.AppendLine("        public Task SwitchAsync(");

        // parameters
        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine($"            Func<{types[i]}, CancellationToken, Task> a{i},");
        }

        sb.AppendLine("            CancellationToken cancellationToken = default)");
        sb.AppendLine("        {");
        sb.AppendLine("            return MatchAsync(");

        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine($"                async (v, ct) => {{ await a{i}(v, ct); return Unit.Default; }},");
        }

        sb.AppendLine("                cancellationToken);");
        sb.AppendLine("        }");
        sb.AppendLine();
    }
    
    private static void WriteAsyncSwitchWithState(EitherStructGenerationContext context, StringBuilder sb)
    {
        var types = context.TypeParameters;
        
        sb.AppendLine("        public Task SwitchAsync<TState>(");

        // parameters
        sb.AppendLine("            TState state,");
        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine($"            Func<TState, {types[i]}, CancellationToken, Task> a{i},");
        }

        sb.AppendLine("            CancellationToken cancellationToken = default)");
        sb.AppendLine("        {");
        sb.AppendLine("            return MatchAsync(");
        sb.AppendLine("                state,");

        for (var i = 0; i < types.Count; i++)
        {
            sb.AppendLine($"                async (s, v, ct) => {{ await a{i}(s, v, ct); return Unit.Default; }},");
        }

        sb.AppendLine("                cancellationToken);");
        sb.AppendLine("        }");
    }

#endregion
}
