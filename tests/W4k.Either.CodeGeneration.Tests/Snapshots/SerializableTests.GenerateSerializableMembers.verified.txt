// <auto-generated />

#nullable enable

namespace MyLittleEither.MyLittleEitherMonad
{
    public partial struct MyEither<TLeft, TRight>
    {
        private readonly byte _idx;
        private readonly TLeft? _v1;
        private readonly TRight? _v2;

        public MyEither(TLeft? value)
        {
            _idx = 1;
            _v1 = value;
            _v2 = default;
        }

        public MyEither(TRight? value)
        {
            _idx = 2;
            _v1 = default;
            _v2 = value;
        }

        private MyEither(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context)
        {
            _idx = info.GetByte(nameof(_idx));
            switch (_idx)
            {
                case 1:
                    _v1 = (TLeft?)info.GetValue("_v1", typeof(TLeft));
                    _v2 = default;
                    break;
                case 2:
                    _v1 = default;
                    _v2 = (TRight?)info.GetValue("_v2", typeof(TRight));
                    break;
                default:
                    _v1 = default;
                    _v2 = default;
                    global::W4k.Either.ThrowHelper.ThrowOnInvalidState();
                break;
            }
        }

        void global::System.Runtime.Serialization.ISerializable.GetObjectData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context)
        {
            info.AddValue("_idx", _idx);
            switch (_idx)
            {
                case 1:
                    info.AddValue("_v1", _v1);
                     break;
                case 2:
                    info.AddValue("_v2", _v2);
                     break;
                default:
                    global::W4k.Either.ThrowHelper.ThrowOnInvalidState();
                    break;
            }
        }

        [global::System.Diagnostics.Contracts.Pure]
        public object? Case
        {
            get
            {
                switch (_idx)
                {
                    case 1:
                        return _v1;
                    case 2:
                        return _v2;
                    default:
                        return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<object?>();
                }
            }
        }

        [global::System.Diagnostics.Contracts.Pure]
        public static bool operator ==(MyLittleEither.MyLittleEitherMonad.MyEither<TLeft, TRight> left, MyLittleEither.MyLittleEitherMonad.MyEither<TLeft, TRight> right) => left.Equals(right);

        [global::System.Diagnostics.Contracts.Pure]
        public static bool operator !=(MyLittleEither.MyLittleEitherMonad.MyEither<TLeft, TRight> left, MyLittleEither.MyLittleEitherMonad.MyEither<TLeft, TRight> right) => !(left == right);

        [global::System.Diagnostics.Contracts.Pure]
        public static implicit operator MyLittleEither.MyLittleEitherMonad.MyEither<TLeft, TRight>(TLeft? value) => new(value);

        [global::System.Diagnostics.Contracts.Pure]
        public static implicit operator MyLittleEither.MyLittleEitherMonad.MyEither<TLeft, TRight>(TRight? value) => new(value);

        [global::System.Diagnostics.Contracts.Pure]
        public override int GetHashCode()
        {
            switch (_idx)
            {
                case 1:
                    return _v1?.GetHashCode() ?? 0;
                case 2:
                    return _v2?.GetHashCode() ?? 0;
                default:
                    return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<int>();
            }
        }

        [global::System.Diagnostics.Contracts.Pure]
        public override string ToString()
        {
            switch (_idx)
            {
                case 1:
                    return _v1?.ToString() ?? string.Empty;
                case 2:
                    return _v2?.ToString() ?? string.Empty;
                default:
                    return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<string>();
            }
        }

        [global::System.Diagnostics.Contracts.Pure]
        public override bool Equals(object? obj)
        {
            if (obj is not MyLittleEither.MyLittleEitherMonad.MyEither<TLeft, TRight> other)
            {
                return false;
            }

            return Equals(other);
        }

        [global::System.Diagnostics.Contracts.Pure]
        public bool Equals(MyLittleEither.MyLittleEitherMonad.MyEither<TLeft, TRight> other)
        {
            if (_idx != other._idx)
            {
                return false;
            }

            switch (_idx)
            {
                case 1:
                    return (_v1 is null && other._v1 is null) || (_v1?.Equals(other._v1) ?? false);
                case 2:
                    return (_v2 is null && other._v2 is null) || (_v2?.Equals(other._v2) ?? false);
                default:
                    return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<bool>();
            }
        }

        [global::System.Diagnostics.Contracts.Pure]
        public bool TryPick(out TLeft? value)
        {
            if (_idx == 1)
            {
                value = _v1;
                return true;
            }

            value = default;
            return false;
        }

        [global::System.Diagnostics.Contracts.Pure]
        public bool TryPick(out TRight? value)
        {
            if (_idx == 2)
            {
                value = _v2;
                return true;
            }

            value = default;
            return false;
        }

        public MyEither<TNew, TRight?> Bind<TNew>(global::System.Func<TLeft?, MyEither<TNew, TRight?>> binder)
        {
            switch (_idx)
            {
                case 1:
                    return binder(_v1);
                case 2:
                    return new MyEither<TNew, TRight?>(_v2);
                default:
                    return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<MyEither<TNew, TRight?>>();
            }
        }

        public MyEither<TNew, TRight?> Bind<TState, TNew>(TState state, global::System.Func<TState, TLeft?, MyEither<TNew, TRight?>> binder)
        {
            switch (_idx)
            {
                case 1:
                    return binder(state, _v1);
                case 2:
                    return new MyEither<TNew, TRight?>(_v2);
                default:
                    return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<MyEither<TNew, TRight?>>();
            }
        }

        public MyEither<TLeft?, TNew> Bind<TNew>(global::System.Func<TRight?, MyEither<TLeft?, TNew>> binder)
        {
            switch (_idx)
            {
                case 1:
                    return new MyEither<TLeft?, TNew>(_v1);
                case 2:
                    return binder(_v2);
                default:
                    return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<MyEither<TLeft?, TNew>>();
            }
        }

        public MyEither<TLeft?, TNew> Bind<TState, TNew>(TState state, global::System.Func<TState, TRight?, MyEither<TLeft?, TNew>> binder)
        {
            switch (_idx)
            {
                case 1:
                    return new MyEither<TLeft?, TNew>(_v1);
                case 2:
                    return binder(state, _v2);
                default:
                    return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<MyEither<TLeft?, TNew>>();
            }
        }

        public MyEither<TNew, TRight?> Map<TNew>(global::System.Func<TLeft?, TNew> mapper)
        {
            switch (_idx)
            {
                case 1:
                    return new MyEither<TNew, TRight?>(mapper(_v1));
                case 2:
                    return new MyEither<TNew, TRight?>(_v2);
                default:
                    return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<MyEither<TNew, TRight?>>();
            }
        }

        public MyEither<TNew, TRight?> Map<TState, TNew>(TState state, global::System.Func<TState, TLeft?, TNew> mapper)
        {
            switch (_idx)
            {
                case 1:
                    return new MyEither<TNew, TRight?>(mapper(state, _v1));
                case 2:
                    return new MyEither<TNew, TRight?>(_v2);
                default:
                    return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<MyEither<TNew, TRight?>>();
            }
        }

        public MyEither<TLeft?, TNew> Map<TNew>(global::System.Func<TRight?, TNew> mapper)
        {
            switch (_idx)
            {
                case 1:
                    return new MyEither<TLeft?, TNew>(_v1);
                case 2:
                    return new MyEither<TLeft?, TNew>(mapper(_v2));
                default:
                    return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<MyEither<TLeft?, TNew>>();
            }
        }

        public MyEither<TLeft?, TNew> Map<TState, TNew>(TState state, global::System.Func<TState, TRight?, TNew> mapper)
        {
            switch (_idx)
            {
                case 1:
                    return new MyEither<TLeft?, TNew>(_v1);
                case 2:
                    return new MyEither<TLeft?, TNew>(mapper(state, _v2));
                default:
                    return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<MyEither<TLeft?, TNew>>();
            }
        }

        public TResult Match<TResult>(
            global::System.Func<TLeft?, TResult> f1,
            global::System.Func<TRight?, TResult> f2)
        {
            global::System.ArgumentNullException.ThrowIfNull(f1);
            global::System.ArgumentNullException.ThrowIfNull(f2);

            switch(_idx)
            {
                case 1:
                    return f1(_v1);
                case 2:
                    return f2(_v2);
                default:
                    return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<TResult>();
            }
        }

        public TResult Match<TState, TResult>(
            TState state,
            global::System.Func<TState, TLeft?, TResult> f1,
            global::System.Func<TState, TRight?, TResult> f2)
        {
            global::System.ArgumentNullException.ThrowIfNull(f1);
            global::System.ArgumentNullException.ThrowIfNull(f2);

            switch(_idx)
            {
                case 1:
                    return f1(state, _v1);
                case 2:
                    return f2(state, _v2);
                default:
                    return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<TResult>();
            }
        }

        public global::System.Threading.Tasks.Task<TResult> MatchAsync<TResult>(
            global::System.Func<TLeft?, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> f1,
            global::System.Func<TRight?, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> f2,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            global::System.ArgumentNullException.ThrowIfNull(f1);
            global::System.ArgumentNullException.ThrowIfNull(f2);

            switch(_idx)
            {
                case 1:
                    return f1(_v1, cancellationToken);
                case 2:
                    return f2(_v2, cancellationToken);
                default:
                    return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<global::System.Threading.Tasks.Task<TResult>>();
            }
        }

        public global::System.Threading.Tasks.Task<TResult> MatchAsync<TState, TResult>(
            TState state,
            global::System.Func<TState, TLeft?, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> f1,
            global::System.Func<TState, TRight?, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> f2,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            global::System.ArgumentNullException.ThrowIfNull(f1);
            global::System.ArgumentNullException.ThrowIfNull(f2);

            switch(_idx)
            {
                case 1:
                    return f1(state, _v1, cancellationToken);
                case 2:
                    return f2(state, _v2, cancellationToken);
                default:
                    return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<global::System.Threading.Tasks.Task<TResult>>();
            }
        }

        public void Switch(
            global::System.Action<TLeft?> a1,
            global::System.Action<TRight?> a2)
        {
            Match(
                v => { a1(v); return global::System.ValueTuple.Create(); },
                v => { a2(v); return global::System.ValueTuple.Create(); });
        }

        public void Switch<TState>(
            TState state,
            global::System.Action<TState, TLeft?> a1,
            global::System.Action<TState, TRight?> a2)
        {
            Match(
                state,
                (s, v) => { a1(s, v); return global::System.ValueTuple.Create(); },
                (s, v) => { a2(s, v); return global::System.ValueTuple.Create(); });
        }

        public global::System.Threading.Tasks.Task SwitchAsync(
            global::System.Func<TLeft?, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> a1,
            global::System.Func<TRight?, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> a2,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            return MatchAsync(
                async (v, ct) => { await a1(v, ct); return System.ValueTuple.Create(); },
                async (v, ct) => { await a2(v, ct); return System.ValueTuple.Create(); },
                cancellationToken);
        }

        public global::System.Threading.Tasks.Task SwitchAsync<TState>(
            TState state,
            global::System.Func<TState, TLeft?, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> a1,
            global::System.Func<TState, TRight?, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> a2,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            return MatchAsync(
                state,
                async (s, v, ct) => { await a1(s, v, ct); return global::System.ValueTuple.Create(); },
                async (s, v, ct) => { await a2(s, v, ct); return global::System.ValueTuple.Create(); },
                cancellationToken);
        }
    }
}
