// <auto-generated />

#nullable enable

namespace MyLittleEither.MyLittleEitherMonad
{
    public partial struct MyStringOrInt
    {
        private readonly byte _idx;
        private readonly string? _v1;
        private readonly int _v2;

        public MyStringOrInt(string? value)
        {
            _idx = 1;
            _v1 = value;
            _v2 = default;
        }

        public MyStringOrInt(int value)
        {
            _idx = 2;
            _v1 = default;
            _v2 = value;
        }

        [global::System.Diagnostics.Contracts.Pure]
        public object? Case
        {
            get
            {
                switch (_idx)
                {
                    case 1:
                        return _v1;
                    case 2:
                        return _v2;
                    default:
                        return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<object?>();
                }
            }
        }

        [global::System.Diagnostics.Contracts.Pure]
        public static bool operator ==(MyLittleEither.MyLittleEitherMonad.MyStringOrInt left, MyLittleEither.MyLittleEitherMonad.MyStringOrInt right) => left.Equals(right);

        [global::System.Diagnostics.Contracts.Pure]
        public static bool operator !=(MyLittleEither.MyLittleEitherMonad.MyStringOrInt left, MyLittleEither.MyLittleEitherMonad.MyStringOrInt right) => !(left == right);

        [global::System.Diagnostics.Contracts.Pure]
        public static implicit operator MyLittleEither.MyLittleEitherMonad.MyStringOrInt(string? value) => new(value);

        [global::System.Diagnostics.Contracts.Pure]
        public static implicit operator MyLittleEither.MyLittleEitherMonad.MyStringOrInt(int value) => new(value);

        [global::System.Diagnostics.Contracts.Pure]
        public override int GetHashCode()
        {
            switch (_idx)
            {
                case 1:
                    return _v1?.GetHashCode() ?? 0;
                case 2:
                    return _v2.GetHashCode();
                default:
                    return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<int>();
            }
        }

        [global::System.Diagnostics.Contracts.Pure]
        public override string ToString()
        {
            switch (_idx)
            {
                case 1:
                    return _v1?.ToString() ?? string.Empty;
                case 2:
                    return _v2.ToString() ?? string.Empty;
                default:
                    return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<string>();
            }
        }

        [global::System.Diagnostics.Contracts.Pure]
        public override bool Equals(object? obj)
        {
            if (obj is not MyLittleEither.MyLittleEitherMonad.MyStringOrInt other)
            {
                return false;
            }

            return Equals(other);
        }

        [global::System.Diagnostics.Contracts.Pure]
        public bool Equals(MyLittleEither.MyLittleEitherMonad.MyStringOrInt other)
        {
            if (_idx != other._idx)
            {
                return false;
            }

            switch (_idx)
            {
                case 1:
                    return (_v1 is null && other._v1 is null) || (_v1?.Equals(other._v1) ?? false);
                case 2:
                    return _v2.Equals(other._v2);
                default:
                    return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<bool>();
            }
        }

        [global::System.Diagnostics.Contracts.Pure]
        public bool TryPick(out string? value)
        {
            if (_idx == 1)
            {
                value = _v1;
                return true;
            }

            value = default;
            return false;
        }

        [global::System.Diagnostics.Contracts.Pure]
        public bool TryPick(out int value)
        {
            if (_idx == 2)
            {
                value = _v2;
                return true;
            }

            value = default;
            return false;
        }

        public TResult Match<TResult>(
            global::System.Func<string?, TResult> f1,
            global::System.Func<int, TResult> f2)
        {
            global::System.ArgumentNullException.ThrowIfNull(f1);
            global::System.ArgumentNullException.ThrowIfNull(f2);

            switch(_idx)
            {
                case 1:
                    return f1(_v1);
                case 2:
                    return f2(_v2);
                default:
                    return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<TResult>();
            }
        }

        public TResult Match<TState, TResult>(
            TState state,
            global::System.Func<TState, string?, TResult> f1,
            global::System.Func<TState, int, TResult> f2)
        {
            global::System.ArgumentNullException.ThrowIfNull(f1);
            global::System.ArgumentNullException.ThrowIfNull(f2);

            switch(_idx)
            {
                case 1:
                    return f1(state, _v1);
                case 2:
                    return f2(state, _v2);
                default:
                    return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<TResult>();
            }
        }

        public global::System.Threading.Tasks.Task<TResult> MatchAsync<TResult>(
            global::System.Func<string?, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> f1,
            global::System.Func<int, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> f2,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            global::System.ArgumentNullException.ThrowIfNull(f1);
            global::System.ArgumentNullException.ThrowIfNull(f2);

            switch(_idx)
            {
                case 1:
                    return f1(_v1, cancellationToken);
                case 2:
                    return f2(_v2, cancellationToken);
                default:
                    return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<global::System.Threading.Tasks.Task<TResult>>();
            }
        }

        public global::System.Threading.Tasks.Task<TResult> MatchAsync<TState, TResult>(
            TState state,
            global::System.Func<TState, string?, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> f1,
            global::System.Func<TState, int, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TResult>> f2,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            global::System.ArgumentNullException.ThrowIfNull(f1);
            global::System.ArgumentNullException.ThrowIfNull(f2);

            switch(_idx)
            {
                case 1:
                    return f1(state, _v1, cancellationToken);
                case 2:
                    return f2(state, _v2, cancellationToken);
                default:
                    return global::W4k.Either.ThrowHelper.ThrowOnInvalidState<global::System.Threading.Tasks.Task<TResult>>();
            }
        }

        public void Switch(
            global::System.Action<string?> a1,
            global::System.Action<int> a2)
        {
            Match(
                v => { a1(v); return global::W4k.Either.Unit.Default; },
                v => { a2(v); return global::W4k.Either.Unit.Default; });
        }

        public void Switch<TState>(
            TState state,
            global::System.Action<TState, string?> a1,
            global::System.Action<TState, int> a2)
        {
            Match(
                state,
                (s, v) => { a1(s, v); return global::W4k.Either.Unit.Default; },
                (s, v) => { a2(s, v); return global::W4k.Either.Unit.Default; });
        }

        public global::System.Threading.Tasks.Task SwitchAsync(
            global::System.Func<string?, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> a1,
            global::System.Func<int, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> a2,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            return MatchAsync(
                async (v, ct) => { await a1(v, ct); return global::W4k.Either.Unit.Default; },
                async (v, ct) => { await a2(v, ct); return global::W4k.Either.Unit.Default; },
                cancellationToken);
        }

        public global::System.Threading.Tasks.Task SwitchAsync<TState>(
            TState state,
            global::System.Func<TState, string?, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> a1,
            global::System.Func<TState, int, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> a2,
            global::System.Threading.CancellationToken cancellationToken = default)
        {
            return MatchAsync(
                state,
                async (s, v, ct) => { await a1(s, v, ct); return global::W4k.Either.Unit.Default; },
                async (s, v, ct) => { await a2(s, v, ct); return global::W4k.Either.Unit.Default; },
                cancellationToken);
        }
    }
}
