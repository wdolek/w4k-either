// <auto-generated />

#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;
using System.Diagnostics.Contracts;
using System.Runtime.Serialization;
using System.Threading;
using System.Threading.Tasks;
using W4k.Either;

namespace MyLittleEither.MyLittleEitherMonad
{
    public partial struct MyEither
    {
        private readonly byte _idx;
        private readonly int _v1;
        private readonly int? _v2;

        public MyEither(int value)
        {
            _idx = 1;
            _v1 = value;
            _v2 = default;
        }

        [Pure]
        public object? Case
        {
            get
            {
                switch (_idx)
                {
                    case 1:
                        return _v1;
                    case 2:
                        return _v2;
                    default:
                        return ThrowHelper.ThrowOnInvalidState<object?>();
                }
            }
        }

        [Pure]
        public static bool operator ==(MyLittleEither.MyLittleEitherMonad.MyEither left, MyLittleEither.MyLittleEitherMonad.MyEither right) => left.Equals(right);

        [Pure]
        public static bool operator !=(MyLittleEither.MyLittleEitherMonad.MyEither left, MyLittleEither.MyLittleEitherMonad.MyEither right) => !(left == right);

        [Pure]
        public static implicit operator MyLittleEither.MyLittleEitherMonad.MyEither(int value) => new(value);

        [Pure]
        public static implicit operator MyLittleEither.MyLittleEitherMonad.MyEither(int? value) => new(value);

        [Pure]
        public override int GetHashCode()
        {
            switch (_idx)
            {
                case 1:
                    return _v1.GetHashCode();
                case 2:
                    return _v2?.GetHashCode() ?? 0;
                default:
                    return ThrowHelper.ThrowOnInvalidState<int>();
            }
        }

        [Pure]
        public override string ToString()
        {
            switch (_idx)
            {
                case 1:
                    return _v1.ToString() ?? string.Empty;
                case 2:
                    return _v2?.ToString() ?? string.Empty;
                default:
                    return ThrowHelper.ThrowOnInvalidState<string>();
            }
        }

        [Pure]
        public override bool Equals(object? obj)
        {
            if (obj is not MyLittleEither.MyLittleEitherMonad.MyEither other)
            {
                return false;
            }

            return Equals(other);
        }

        [Pure]
        public bool Equals(MyLittleEither.MyLittleEitherMonad.MyEither other)
        {
            if (_idx != other._idx)
            {
                return false;
            }

            switch (_idx)
            {
                case 1:
                    return _v1.Equals(other._v1);
                case 2:
                    return _v2?.Equals(other._v2) ?? false;
                default:
                    return ThrowHelper.ThrowOnInvalidState<bool>();
            }
        }

        [Pure]
        public bool TryPick(out int value)
        {
            if (_idx == 1)
            {
                value = _v1;
                return true;
            }

            value = default;
            return false;
        }

        [Pure]
        public bool TryPick(out int? value)
        {
            if (_idx == 2)
            {
                value = _v2;
                return true;
            }

            value = default;
            return false;
        }

        public TResult Match<TResult>(
            Func<int, TResult> f1,
            Func<int?, TResult> f2)
        {
            ArgumentNullException.ThrowIfNull(f1);
            ArgumentNullException.ThrowIfNull(f2);

            switch(_idx)
            {
                case 1:
                    return f1(_v1);
                case 2:
                    return f2(_v2);
                default:
                    return ThrowHelper.ThrowOnInvalidState<TResult>();
            }
        }

        public TResult Match<TState, TResult>(
            TState state,
            Func<TState, int, TResult> f1,
            Func<TState, int?, TResult> f2)
        {
            ArgumentNullException.ThrowIfNull(f1);
            ArgumentNullException.ThrowIfNull(f2);

            switch(_idx)
            {
                case 1:
                    return f1(state, _v1);
                case 2:
                    return f2(state, _v2);
                default:
                    return ThrowHelper.ThrowOnInvalidState<TResult>();
            }
        }

        public Task<TResult> MatchAsync<TResult>(
            Func<int, CancellationToken, Task<TResult>> f1,
            Func<int?, CancellationToken, Task<TResult>> f2,
            CancellationToken cancellationToken = default)
        {
            ArgumentNullException.ThrowIfNull(f1);
            ArgumentNullException.ThrowIfNull(f2);

            switch(_idx)
            {
                case 1:
                    return f1(_v1, cancellationToken);
                case 2:
                    return f2(_v2, cancellationToken);
                default:
                    return ThrowHelper.ThrowOnInvalidState<Task<TResult>>();
            }
        }

        public Task<TResult> MatchAsync<TState, TResult>(
            TState state,
            Func<TState, int, CancellationToken, Task<TResult>> f1,
            Func<TState, int?, CancellationToken, Task<TResult>> f2,
            CancellationToken cancellationToken = default)
        {
            ArgumentNullException.ThrowIfNull(f1);
            ArgumentNullException.ThrowIfNull(f2);

            switch(_idx)
            {
                case 1:
                    return f1(state, _v1, cancellationToken);
                case 2:
                    return f2(state, _v2, cancellationToken);
                default:
                    return ThrowHelper.ThrowOnInvalidState<Task<TResult>>();
            }
        }

        public void Switch(
            Action<int> a1,
            Action<int?> a2)
        {
            Match(
                v => { a1(v); return Unit.Default; },
                v => { a2(v); return Unit.Default; });
        }

        public void Switch<TState>(
            TState state,
            Action<TState, int> a1,
            Action<TState, int?> a2)
        {
            Match(
                state,
                (s, v) => { a1(s, v); return Unit.Default; },
                (s, v) => { a2(s, v); return Unit.Default; });
        }

        public Task SwitchAsync(
            Func<int, CancellationToken, Task> a1,
            Func<int?, CancellationToken, Task> a2,
            CancellationToken cancellationToken = default)
        {
            return MatchAsync(
                async (v, ct) => { await a1(v, ct); return Unit.Default; },
                async (v, ct) => { await a2(v, ct); return Unit.Default; },
                cancellationToken);
        }

        public Task SwitchAsync<TState>(
            TState state,
            Func<TState, int, CancellationToken, Task> a1,
            Func<TState, int?, CancellationToken, Task> a2,
            CancellationToken cancellationToken = default)
        {
            return MatchAsync(
                state,
                async (s, v, ct) => { await a1(s, v, ct); return Unit.Default; },
                async (s, v, ct) => { await a2(s, v, ct); return Unit.Default; },
                cancellationToken);
        }
    }
}
