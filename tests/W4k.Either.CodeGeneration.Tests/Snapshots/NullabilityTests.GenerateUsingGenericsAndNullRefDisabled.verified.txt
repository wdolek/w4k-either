// <auto-generated />

#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;
using System.Diagnostics.Contracts;
using System.Runtime.Serialization;
using System.Threading;
using System.Threading.Tasks;
using W4k.Either;

namespace MyLittleEither.MyLittleEitherMonad
{
    public partial struct MyEither<TAny, TNullRef, TStruct, TNotNull, TObj, TIFace, TUnmanaged>
    {
        private readonly byte _idx;
        private readonly TAny? _v1;
        private readonly TNullRef? _v2;
        private readonly TStruct _v3;
        private readonly TNotNull? _v4;
        private readonly TObj? _v5;
        private readonly TIFace? _v6;
        private readonly TUnmanaged _v7;

        public MyEither(TAny? value)
        {
            _idx = 1;
            _v1 = value;
            _v2 = default;
            _v3 = default;
            _v4 = default!;
            _v5 = default;
            _v6 = default;
            _v7 = default;
        }

        public MyEither(TNullRef? value)
        {
            _idx = 2;
            _v1 = default;
            _v2 = value;
            _v3 = default;
            _v4 = default!;
            _v5 = default;
            _v6 = default;
            _v7 = default;
        }

        public MyEither(TStruct value)
        {
            _idx = 3;
            _v1 = default;
            _v2 = default;
            _v3 = value;
            _v4 = default!;
            _v5 = default;
            _v6 = default;
            _v7 = default;
        }

        public MyEither(TNotNull value)
        {
            ArgumentNullException.ThrowIfNull(value);
            _idx = 4;
            _v1 = default;
            _v2 = default;
            _v3 = default;
            _v4 = value;
            _v5 = default;
            _v6 = default;
            _v7 = default;
        }

        public MyEither(TObj? value)
        {
            _idx = 5;
            _v1 = default;
            _v2 = default;
            _v3 = default;
            _v4 = default!;
            _v5 = value;
            _v6 = default;
            _v7 = default;
        }

        public MyEither(TIFace? value)
        {
            _idx = 6;
            _v1 = default;
            _v2 = default;
            _v3 = default;
            _v4 = default!;
            _v5 = default;
            _v6 = value;
            _v7 = default;
        }

        public MyEither(TUnmanaged value)
        {
            _idx = 7;
            _v1 = default;
            _v2 = default;
            _v3 = default;
            _v4 = default!;
            _v5 = default;
            _v6 = default;
            _v7 = value;
        }

        [Pure]
        public object? Case
        {
            get
            {
                switch (_idx)
                {
                    case 1:
                        return _v1;
                    case 2:
                        return _v2;
                    case 3:
                        return _v3;
                    case 4:
                        return _v4;
                    case 5:
                        return _v5;
                    case 6:
                        return _v6;
                    case 7:
                        return _v7;
                    default:
                        return ThrowHelper.ThrowOnInvalidState<object?>();
                }
            }
        }

        [Pure]
        public static bool operator ==(MyLittleEither.MyLittleEitherMonad.MyEither<TAny, TNullRef, TStruct, TNotNull, TObj, TIFace, TUnmanaged> left, MyLittleEither.MyLittleEitherMonad.MyEither<TAny, TNullRef, TStruct, TNotNull, TObj, TIFace, TUnmanaged> right) => left.Equals(right);

        [Pure]
        public static bool operator !=(MyLittleEither.MyLittleEitherMonad.MyEither<TAny, TNullRef, TStruct, TNotNull, TObj, TIFace, TUnmanaged> left, MyLittleEither.MyLittleEitherMonad.MyEither<TAny, TNullRef, TStruct, TNotNull, TObj, TIFace, TUnmanaged> right) => !(left == right);

        [Pure]
        public static implicit operator MyLittleEither.MyLittleEitherMonad.MyEither<TAny, TNullRef, TStruct, TNotNull, TObj, TIFace, TUnmanaged>(TAny? value) => new(value);

        [Pure]
        public static implicit operator MyLittleEither.MyLittleEitherMonad.MyEither<TAny, TNullRef, TStruct, TNotNull, TObj, TIFace, TUnmanaged>(TNullRef? value) => new(value);

        [Pure]
        public static implicit operator MyLittleEither.MyLittleEitherMonad.MyEither<TAny, TNullRef, TStruct, TNotNull, TObj, TIFace, TUnmanaged>(TStruct value) => new(value);

        [Pure]
        public static implicit operator MyLittleEither.MyLittleEitherMonad.MyEither<TAny, TNullRef, TStruct, TNotNull, TObj, TIFace, TUnmanaged>(TNotNull value) => new(value);

        [Pure]
        public static implicit operator MyLittleEither.MyLittleEitherMonad.MyEither<TAny, TNullRef, TStruct, TNotNull, TObj, TIFace, TUnmanaged>(TObj? value) => new(value);

        [Pure]
        public static implicit operator MyLittleEither.MyLittleEitherMonad.MyEither<TAny, TNullRef, TStruct, TNotNull, TObj, TIFace, TUnmanaged>(TIFace? value) => new(value);

        [Pure]
        public static implicit operator MyLittleEither.MyLittleEitherMonad.MyEither<TAny, TNullRef, TStruct, TNotNull, TObj, TIFace, TUnmanaged>(TUnmanaged value) => new(value);

        [Pure]
        public override int GetHashCode()
        {
            switch (_idx)
            {
                case 1:
                    return _v1?.GetHashCode() ?? 0;
                case 2:
                    return _v2?.GetHashCode() ?? 0;
                case 3:
                    return _v3.GetHashCode();
                case 4:
                    return _v4!.GetHashCode();
                case 5:
                    return _v5?.GetHashCode() ?? 0;
                case 6:
                    return _v6?.GetHashCode() ?? 0;
                case 7:
                    return _v7.GetHashCode();
                default:
                    return ThrowHelper.ThrowOnInvalidState<int>();
            }
        }

        [Pure]
        public override string ToString()
        {
            switch (_idx)
            {
                case 1:
                    return _v1?.ToString() ?? string.Empty;
                case 2:
                    return _v2?.ToString() ?? string.Empty;
                case 3:
                    return _v3.ToString() ?? string.Empty;
                case 4:
                    return _v4!.ToString() ?? string.Empty;
                case 5:
                    return _v5?.ToString() ?? string.Empty;
                case 6:
                    return _v6?.ToString() ?? string.Empty;
                case 7:
                    return _v7.ToString() ?? string.Empty;
                default:
                    return ThrowHelper.ThrowOnInvalidState<string>();
            }
        }

        [Pure]
        public override bool Equals(object? obj)
        {
            if (obj is not MyLittleEither.MyLittleEitherMonad.MyEither<TAny, TNullRef, TStruct, TNotNull, TObj, TIFace, TUnmanaged> other)
            {
                return false;
            }

            return Equals(other);
        }

        [Pure]
        public bool Equals(MyLittleEither.MyLittleEitherMonad.MyEither<TAny, TNullRef, TStruct, TNotNull, TObj, TIFace, TUnmanaged> other)
        {
            if (_idx != other._idx)
            {
                return false;
            }

            switch (_idx)
            {
                case 1:
                    return (_v1 is null && other._v1 is null) || (_v1?.Equals(other._v1) ?? false);
                case 2:
                    return (_v2 is null && other._v2 is null) || (_v2?.Equals(other._v2) ?? false);
                case 3:
                    return _v3.Equals(other._v3);
                case 4:
                    return _v4!.Equals(other._v4);
                case 5:
                    return (_v5 is null && other._v5 is null) || (_v5?.Equals(other._v5) ?? false);
                case 6:
                    return (_v6 is null && other._v6 is null) || (_v6?.Equals(other._v6) ?? false);
                case 7:
                    return _v7.Equals(other._v7);
                default:
                    return ThrowHelper.ThrowOnInvalidState<bool>();
            }
        }

        [Pure]
        public bool TryPick(out TAny? value)
        {
            if (_idx == 1)
            {
                value = _v1;
                return true;
            }

            value = default;
            return false;
        }

        [Pure]
        public bool TryPick(out TNullRef? value)
        {
            if (_idx == 2)
            {
                value = _v2;
                return true;
            }

            value = default;
            return false;
        }

        [Pure]
        public bool TryPick(out TStruct value)
        {
            if (_idx == 3)
            {
                value = _v3;
                return true;
            }

            value = default;
            return false;
        }

        [Pure]
        public bool TryPick([NotNullWhen(true)] out TNotNull? value)
        {
            if (_idx == 4)
            {
                value = _v4!;
                return true;
            }

            value = default!;
            return false;
        }

        [Pure]
        public bool TryPick(out TObj? value)
        {
            if (_idx == 5)
            {
                value = _v5;
                return true;
            }

            value = default;
            return false;
        }

        [Pure]
        public bool TryPick(out TIFace? value)
        {
            if (_idx == 6)
            {
                value = _v6;
                return true;
            }

            value = default;
            return false;
        }

        [Pure]
        public bool TryPick(out TUnmanaged value)
        {
            if (_idx == 7)
            {
                value = _v7;
                return true;
            }

            value = default;
            return false;
        }

        public TResult Match<TResult>(
            Func<TAny?, TResult> f1,
            Func<TNullRef?, TResult> f2,
            Func<TStruct, TResult> f3,
            Func<TNotNull, TResult> f4,
            Func<TObj?, TResult> f5,
            Func<TIFace?, TResult> f6,
            Func<TUnmanaged, TResult> f7)
        {
            ArgumentNullException.ThrowIfNull(f1);
            ArgumentNullException.ThrowIfNull(f2);
            ArgumentNullException.ThrowIfNull(f3);
            ArgumentNullException.ThrowIfNull(f4);
            ArgumentNullException.ThrowIfNull(f5);
            ArgumentNullException.ThrowIfNull(f6);
            ArgumentNullException.ThrowIfNull(f7);

            switch(_idx)
            {
                case 1:
                    return f1(_v1);
                case 2:
                    return f2(_v2);
                case 3:
                    return f3(_v3);
                case 4:
                    return f4(_v4!);
                case 5:
                    return f5(_v5);
                case 6:
                    return f6(_v6);
                case 7:
                    return f7(_v7);
                default:
                    return ThrowHelper.ThrowOnInvalidState<TResult>();
            }
        }

        public TResult Match<TState, TResult>(
            TState state,
            Func<TState, TAny?, TResult> f1,
            Func<TState, TNullRef?, TResult> f2,
            Func<TState, TStruct, TResult> f3,
            Func<TState, TNotNull, TResult> f4,
            Func<TState, TObj?, TResult> f5,
            Func<TState, TIFace?, TResult> f6,
            Func<TState, TUnmanaged, TResult> f7)
        {
            ArgumentNullException.ThrowIfNull(f1);
            ArgumentNullException.ThrowIfNull(f2);
            ArgumentNullException.ThrowIfNull(f3);
            ArgumentNullException.ThrowIfNull(f4);
            ArgumentNullException.ThrowIfNull(f5);
            ArgumentNullException.ThrowIfNull(f6);
            ArgumentNullException.ThrowIfNull(f7);

            switch(_idx)
            {
                case 1:
                    return f1(state, _v1);
                case 2:
                    return f2(state, _v2);
                case 3:
                    return f3(state, _v3);
                case 4:
                    return f4(state, _v4!);
                case 5:
                    return f5(state, _v5);
                case 6:
                    return f6(state, _v6);
                case 7:
                    return f7(state, _v7);
                default:
                    return ThrowHelper.ThrowOnInvalidState<TResult>();
            }
        }

        public Task<TResult> MatchAsync<TResult>(
            Func<TAny?, CancellationToken, Task<TResult>> f1,
            Func<TNullRef?, CancellationToken, Task<TResult>> f2,
            Func<TStruct, CancellationToken, Task<TResult>> f3,
            Func<TNotNull, CancellationToken, Task<TResult>> f4,
            Func<TObj?, CancellationToken, Task<TResult>> f5,
            Func<TIFace?, CancellationToken, Task<TResult>> f6,
            Func<TUnmanaged, CancellationToken, Task<TResult>> f7,
            CancellationToken cancellationToken = default)
        {
            ArgumentNullException.ThrowIfNull(f1);
            ArgumentNullException.ThrowIfNull(f2);
            ArgumentNullException.ThrowIfNull(f3);
            ArgumentNullException.ThrowIfNull(f4);
            ArgumentNullException.ThrowIfNull(f5);
            ArgumentNullException.ThrowIfNull(f6);
            ArgumentNullException.ThrowIfNull(f7);

            switch(_idx)
            {
                case 1:
                    return f1(_v1, cancellationToken);
                case 2:
                    return f2(_v2, cancellationToken);
                case 3:
                    return f3(_v3, cancellationToken);
                case 4:
                    return f4(_v4!, cancellationToken);
                case 5:
                    return f5(_v5, cancellationToken);
                case 6:
                    return f6(_v6, cancellationToken);
                case 7:
                    return f7(_v7, cancellationToken);
                default:
                    return ThrowHelper.ThrowOnInvalidState<Task<TResult>>();
            }
        }

        public Task<TResult> MatchAsync<TState, TResult>(
            TState state,
            Func<TState, TAny?, CancellationToken, Task<TResult>> f1,
            Func<TState, TNullRef?, CancellationToken, Task<TResult>> f2,
            Func<TState, TStruct, CancellationToken, Task<TResult>> f3,
            Func<TState, TNotNull, CancellationToken, Task<TResult>> f4,
            Func<TState, TObj?, CancellationToken, Task<TResult>> f5,
            Func<TState, TIFace?, CancellationToken, Task<TResult>> f6,
            Func<TState, TUnmanaged, CancellationToken, Task<TResult>> f7,
            CancellationToken cancellationToken = default)
        {
            ArgumentNullException.ThrowIfNull(f1);
            ArgumentNullException.ThrowIfNull(f2);
            ArgumentNullException.ThrowIfNull(f3);
            ArgumentNullException.ThrowIfNull(f4);
            ArgumentNullException.ThrowIfNull(f5);
            ArgumentNullException.ThrowIfNull(f6);
            ArgumentNullException.ThrowIfNull(f7);

            switch(_idx)
            {
                case 1:
                    return f1(state, _v1, cancellationToken);
                case 2:
                    return f2(state, _v2, cancellationToken);
                case 3:
                    return f3(state, _v3, cancellationToken);
                case 4:
                    return f4(state, _v4!, cancellationToken);
                case 5:
                    return f5(state, _v5, cancellationToken);
                case 6:
                    return f6(state, _v6, cancellationToken);
                case 7:
                    return f7(state, _v7, cancellationToken);
                default:
                    return ThrowHelper.ThrowOnInvalidState<Task<TResult>>();
            }
        }

        public void Switch(
            Action<TAny?> a1,
            Action<TNullRef?> a2,
            Action<TStruct> a3,
            Action<TNotNull> a4,
            Action<TObj?> a5,
            Action<TIFace?> a6,
            Action<TUnmanaged> a7)
        {
            Match(
                v => { a1(v); return Unit.Default; },
                v => { a2(v); return Unit.Default; },
                v => { a3(v); return Unit.Default; },
                v => { a4(v); return Unit.Default; },
                v => { a5(v); return Unit.Default; },
                v => { a6(v); return Unit.Default; },
                v => { a7(v); return Unit.Default; });
        }

        public void Switch<TState>(
            TState state,
            Action<TState, TAny?> a1,
            Action<TState, TNullRef?> a2,
            Action<TState, TStruct> a3,
            Action<TState, TNotNull> a4,
            Action<TState, TObj?> a5,
            Action<TState, TIFace?> a6,
            Action<TState, TUnmanaged> a7)
        {
            Match(
                state,
                (s, v) => { a1(s, v); return Unit.Default; },
                (s, v) => { a2(s, v); return Unit.Default; },
                (s, v) => { a3(s, v); return Unit.Default; },
                (s, v) => { a4(s, v); return Unit.Default; },
                (s, v) => { a5(s, v); return Unit.Default; },
                (s, v) => { a6(s, v); return Unit.Default; },
                (s, v) => { a7(s, v); return Unit.Default; });
        }

        public Task SwitchAsync(
            Func<TAny?, CancellationToken, Task> a1,
            Func<TNullRef?, CancellationToken, Task> a2,
            Func<TStruct, CancellationToken, Task> a3,
            Func<TNotNull, CancellationToken, Task> a4,
            Func<TObj?, CancellationToken, Task> a5,
            Func<TIFace?, CancellationToken, Task> a6,
            Func<TUnmanaged, CancellationToken, Task> a7,
            CancellationToken cancellationToken = default)
        {
            return MatchAsync(
                async (v, ct) => { await a1(v, ct); return Unit.Default; },
                async (v, ct) => { await a2(v, ct); return Unit.Default; },
                async (v, ct) => { await a3(v, ct); return Unit.Default; },
                async (v, ct) => { await a4(v, ct); return Unit.Default; },
                async (v, ct) => { await a5(v, ct); return Unit.Default; },
                async (v, ct) => { await a6(v, ct); return Unit.Default; },
                async (v, ct) => { await a7(v, ct); return Unit.Default; },
                cancellationToken);
        }

        public Task SwitchAsync<TState>(
            TState state,
            Func<TState, TAny?, CancellationToken, Task> a1,
            Func<TState, TNullRef?, CancellationToken, Task> a2,
            Func<TState, TStruct, CancellationToken, Task> a3,
            Func<TState, TNotNull, CancellationToken, Task> a4,
            Func<TState, TObj?, CancellationToken, Task> a5,
            Func<TState, TIFace?, CancellationToken, Task> a6,
            Func<TState, TUnmanaged, CancellationToken, Task> a7,
            CancellationToken cancellationToken = default)
        {
            return MatchAsync(
                state,
                async (s, v, ct) => { await a1(s, v, ct); return Unit.Default; },
                async (s, v, ct) => { await a2(s, v, ct); return Unit.Default; },
                async (s, v, ct) => { await a3(s, v, ct); return Unit.Default; },
                async (s, v, ct) => { await a4(s, v, ct); return Unit.Default; },
                async (s, v, ct) => { await a5(s, v, ct); return Unit.Default; },
                async (s, v, ct) => { await a6(s, v, ct); return Unit.Default; },
                async (s, v, ct) => { await a7(s, v, ct); return Unit.Default; },
                cancellationToken);
        }
    }
}
